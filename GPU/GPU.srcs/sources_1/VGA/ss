`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 2020/12/03 12:09:32
// Design Name: 
// Module Name: point
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module point(
 input uart_rx,//串口接入
 input clk,//系统时钟信号
 input rst, //系统复位(vga复位)
 output reg[3:0] red,
 output reg[3:0] green,
 output reg[3:0] blue,
 output hs, // VGA行同步信号
 output vs, // VGA场同步信号
 output active,//控制vga信号是否输出
 output [11:0] h_cnt,//行计数器
 output [11:0] v_cnt//列计数器
    );
    reg [3:0] wea = 4'b00;
    wire tt;//绑定以后，1为只写模式，0为读模式
//    wire [11:0] h_cnt;//行计数器
//    wire [11:0] v_cnt;//列计数器
    reg [18:0] rd_addr;//ram寄存器中读的地址
    wire [11:0] rd_data;//ram寄存器中读的数据
    wire  [12:0]number = 3'd5;
          vga vg(clk,rst,hs,vs,h_cnt,v_cnt,active);
          uart2 ip(clk,rst,number,rd_addr,rd_data, uart_rx,tt);
    
//    wire wea1;
//    reg [18:0] rd_addr1;//ram寄存器中读的地址
//    wire [11:0] rd_data1;//ram寄存器中读的数据
//    reg	[18:0] 	wr_addr1; 
//    reg	[11:0]	wr_data1;
//          blk_mem_gen_1 pic (
//            .clka(clk),
//            .wea(wea1),
//            .addra(wr_addr1),
//            .dina(wr_data1),
//            .clkb(clk),
//            .addrb(rd_addr1),
//            .doutb(rd_data1)
//            );     
            
          //参数
          // 分辨率为640*480时行时序各个参数定义
      parameter     C_H_SYNC_PULSE     =   96  , 
                      C_H_BACK_PORCH      =   48  ,
                      C_H_ACTIVE_TIME     =   640 ,
                      C_H_FRONT_PORCH     =   16  ,
                      C_H_LINE_PERIOD     =   800 ;
      
      // 分辨率为640*480时场时序各个参数定义               
      parameter     C_V_SYNC_PULSE      =   2   , 
                      C_V_BACK_PORCH      =   33  ,
                      C_V_ACTIVE_TIME     =   480 ,
                      C_V_FRONT_PORCH     =   10  ,
                      C_V_FRAME_PERIOD    =   525 ;
                      //三个参数
    reg[11:0]x1;
    reg [11:0]y1;
    reg [3:0]r,g,b;//颜色参数
    reg [6:0] wea2 = 7'd0;
     always @(posedge clk or negedge rst)
     begin
     if(tt==1)begin
        if(wea!=0)
        begin
           wea <= 0;
           rd_addr <=19'd0;
        end
     end
     else if(wea != 4'd6)
        begin
        case(wea)
                4'd0:
                begin
                if(tt==1)
                  begin
                      wea<= wea;
                  end
                else
                  begin
                      rd_addr <= 19'd1;
                      wea  <= wea +1'b1;
                  end
                end 
                4'd1:
                   begin
                       x1 <= rd_data;
                       rd_addr <= rd_addr+1'b1;
                       wea  <= wea +1'b1;
                   end
                4'd2:
                  begin
                       y1<= rd_data;
                       rd_addr <= rd_addr+1'b1;
                       wea <= wea +1'b1;
                   end
                4'd3:
                  begin
                      r[3:0] <= rd_data[3:0];
                      rd_addr <= rd_addr+1'b1;
                      wea <= wea +1'b1;
                  end
                4'd4:
                  begin
                     g[3:0] <= rd_data[3:0];
                     rd_addr <= rd_addr+1'b1;
                     wea <= wea +1'b1;
                  end
                4'd5:
                begin
                      b[3:0] <= rd_data[3:0];
                      rd_addr <= rd_addr+1'b1;
                     wea <= wea +1'b1;
                end
                default:wea <= wea;   
           endcase
        end
    else
    begin
          if(!rst) 
              begin
                 red   <=  4'b0000    ;
                 green <=  4'b0000   ;
                 blue  <=  4'b0000    ; 
              end
              else if(active)
              begin
              //wr_addr1 <= wr_addr1+1'b1;
              if((h_cnt == x1  +  C_H_SYNC_PULSE + C_H_BACK_PORCH) && (v_cnt == y1 +   C_V_SYNC_PULSE +   C_V_BACK_PORCH)   )
              begin
                   red<= r;
                   green<= g;
                   blue<= b; 
              end
              else
              begin
                     red   <=  4'b0000    ;
                    green <=  4'b0000   ;
                    blue  <=  4'b0000    ; 
              end
          end
  end
end
endmodule
